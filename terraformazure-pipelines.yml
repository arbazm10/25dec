# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c2df13bf-8d78-4456-98b1-09560081ad17'
  imageRepository: 'terraformazure'
  containerRegistry: 'arbaz.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)
    - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    - bash: echo after copying ti Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'k8s yaml need in release pipeline'
        publishLocation: 'Container'
- stage:
  jobs:
  - job:
    steps:
    - task: TerraformInstaller@2
      inputs:
        terraformVersion: 'latest'
    - task: TerraformCLI@2
      inputs:
        command: 'validate'
        allowTelemetryCollection: false
    - task: TerraformCLI@2
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)terraform'
        backendType: 'azurerm'
        backendServiceArm: 'terraformaccess'
        backendAzureRmStorageAccountName: 'terraformdev25'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'terraform.tfstate'
        allowTelemetryCollection: false
    - task: TerraformCLI@2
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'Azure subscription 1(898734ae-50a5-4891-b151-0d0c58eaf0d6)'
        allowTelemetryCollection: false